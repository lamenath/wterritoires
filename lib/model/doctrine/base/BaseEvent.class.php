<?php

/**
 * BaseEvent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $createur_id
 * @property integer $story_id
 * @property string $titre
 * @property clob $description
 * @property string $photo
 * @property clob $contacts
 * @property string $lieu
 * @property clob $adresse
 * @property string $ville
 * @property timestamp $start_at
 * @property timestamp $end_at
 * @property enum $visibilite
 * @property Story $Story
 * @property Doctrine_Collection $Structure
 * @property Doctrine_Collection $Invite
 * @property Doctrine_Collection $Admin
 * @property Doctrine_Collection $Metier
 * @property Doctrine_Collection $Filiere
 * @property Doctrine_Collection $Theme
 * @property Doctrine_Collection $Competence
 * @property Doctrine_Collection $Invitation
 * @property Doctrine_Collection $InvitationEmail
 * @property Doctrine_Collection $PhotoProjet
 * @property Doctrine_Collection $Ressource
 * @property Doctrine_Collection $EventFiliere
 * @property Doctrine_Collection $EventTheme
 * @property Doctrine_Collection $EventCompetence
 * @property Doctrine_Collection $EventMetier
 * @property Doctrine_Collection $EventStructure
 * @property Doctrine_Collection $EventAdmin
 * @property Doctrine_Collection $EventInvite
 * @property Doctrine_Collection $ProjetIdee
 * 
 * @method integer             getCreateurId()      Returns the current record's "createur_id" value
 * @method integer             getStoryId()         Returns the current record's "story_id" value
 * @method string              getTitre()           Returns the current record's "titre" value
 * @method clob                getDescription()     Returns the current record's "description" value
 * @method string              getPhoto()           Returns the current record's "photo" value
 * @method clob                getContacts()        Returns the current record's "contacts" value
 * @method string              getLieu()            Returns the current record's "lieu" value
 * @method clob                getAdresse()         Returns the current record's "adresse" value
 * @method string              getVille()           Returns the current record's "ville" value
 * @method timestamp           getStartAt()         Returns the current record's "start_at" value
 * @method timestamp           getEndAt()           Returns the current record's "end_at" value
 * @method enum                getVisibilite()      Returns the current record's "visibilite" value
 * @method Story               getStory()           Returns the current record's "Story" value
 * @method Doctrine_Collection getStructure()       Returns the current record's "Structure" collection
 * @method Doctrine_Collection getInvite()          Returns the current record's "Invite" collection
 * @method Doctrine_Collection getAdmin()           Returns the current record's "Admin" collection
 * @method Doctrine_Collection getMetier()          Returns the current record's "Metier" collection
 * @method Doctrine_Collection getFiliere()         Returns the current record's "Filiere" collection
 * @method Doctrine_Collection getTheme()           Returns the current record's "Theme" collection
 * @method Doctrine_Collection getCompetence()      Returns the current record's "Competence" collection
 * @method Doctrine_Collection getInvitation()      Returns the current record's "Invitation" collection
 * @method Doctrine_Collection getInvitationEmail() Returns the current record's "InvitationEmail" collection
 * @method Doctrine_Collection getPhotoProjet()     Returns the current record's "PhotoProjet" collection
 * @method Doctrine_Collection getRessource()       Returns the current record's "Ressource" collection
 * @method Doctrine_Collection getEventFiliere()    Returns the current record's "EventFiliere" collection
 * @method Doctrine_Collection getEventTheme()      Returns the current record's "EventTheme" collection
 * @method Doctrine_Collection getEventCompetence() Returns the current record's "EventCompetence" collection
 * @method Doctrine_Collection getEventMetier()     Returns the current record's "EventMetier" collection
 * @method Doctrine_Collection getEventStructure()  Returns the current record's "EventStructure" collection
 * @method Doctrine_Collection getEventAdmin()      Returns the current record's "EventAdmin" collection
 * @method Doctrine_Collection getEventInvite()     Returns the current record's "EventInvite" collection
 * @method Doctrine_Collection getProjetIdee()      Returns the current record's "ProjetIdee" collection
 * @method Event               setCreateurId()      Sets the current record's "createur_id" value
 * @method Event               setStoryId()         Sets the current record's "story_id" value
 * @method Event               setTitre()           Sets the current record's "titre" value
 * @method Event               setDescription()     Sets the current record's "description" value
 * @method Event               setPhoto()           Sets the current record's "photo" value
 * @method Event               setContacts()        Sets the current record's "contacts" value
 * @method Event               setLieu()            Sets the current record's "lieu" value
 * @method Event               setAdresse()         Sets the current record's "adresse" value
 * @method Event               setVille()           Sets the current record's "ville" value
 * @method Event               setStartAt()         Sets the current record's "start_at" value
 * @method Event               setEndAt()           Sets the current record's "end_at" value
 * @method Event               setVisibilite()      Sets the current record's "visibilite" value
 * @method Event               setStory()           Sets the current record's "Story" value
 * @method Event               setStructure()       Sets the current record's "Structure" collection
 * @method Event               setInvite()          Sets the current record's "Invite" collection
 * @method Event               setAdmin()           Sets the current record's "Admin" collection
 * @method Event               setMetier()          Sets the current record's "Metier" collection
 * @method Event               setFiliere()         Sets the current record's "Filiere" collection
 * @method Event               setTheme()           Sets the current record's "Theme" collection
 * @method Event               setCompetence()      Sets the current record's "Competence" collection
 * @method Event               setInvitation()      Sets the current record's "Invitation" collection
 * @method Event               setInvitationEmail() Sets the current record's "InvitationEmail" collection
 * @method Event               setPhotoProjet()     Sets the current record's "PhotoProjet" collection
 * @method Event               setRessource()       Sets the current record's "Ressource" collection
 * @method Event               setEventFiliere()    Sets the current record's "EventFiliere" collection
 * @method Event               setEventTheme()      Sets the current record's "EventTheme" collection
 * @method Event               setEventCompetence() Sets the current record's "EventCompetence" collection
 * @method Event               setEventMetier()     Sets the current record's "EventMetier" collection
 * @method Event               setEventStructure()  Sets the current record's "EventStructure" collection
 * @method Event               setEventAdmin()      Sets the current record's "EventAdmin" collection
 * @method Event               setEventInvite()     Sets the current record's "EventInvite" collection
 * @method Event               setProjetIdee()      Sets the current record's "ProjetIdee" collection
 * 
 * @package    rrr
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEvent extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('event');
        $this->hasColumn('createur_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('story_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('titre', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('description', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('photo', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('contacts', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('lieu', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('adresse', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('ville', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('start_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('end_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('visibilite', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'public',
              1 => 'private',
             ),
             'default' => 'public',
             ));


        $this->index('start_at', array(
             'fields' => 
             array(
              0 => 'start_at',
             ),
             ));
        $this->index('end_at', array(
             'fields' => 
             array(
              0 => 'end_at',
             ),
             ));
        $this->index('visibilite', array(
             'fields' => 
             array(
              0 => 'visibilite',
             ),
             ));
        $this->index('latitude', array(
             'fields' => 
             array(
              0 => 'latitude',
             ),
             ));
        $this->index('longitude', array(
             'fields' => 
             array(
              0 => 'longitude',
             ),
             ));
        $this->index('titre', array(
             'fields' => 
             array(
              0 => 'titre',
             ),
             ));
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Story', array(
             'local' => 'story_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('Structure', array(
             'refClass' => 'EventStructure',
             'local' => 'event_id',
             'foreign' => 'structure_id'));

        $this->hasMany('Profil as Invite', array(
             'refClass' => 'EventInvite',
             'local' => 'event_id',
             'foreign' => 'profil_id'));

        $this->hasMany('Profil as Admin', array(
             'refClass' => 'EventAdmin',
             'local' => 'event_id',
             'foreign' => 'profil_id'));

        $this->hasMany('Metier', array(
             'refClass' => 'EventMetier',
             'local' => 'event_id',
             'foreign' => 'metier_id'));

        $this->hasMany('Filiere', array(
             'refClass' => 'EventFiliere',
             'local' => 'event_id',
             'foreign' => 'filiere_id'));

        $this->hasMany('Theme', array(
             'refClass' => 'EventTheme',
             'local' => 'event_id',
             'foreign' => 'theme_id'));

        $this->hasMany('Competence', array(
             'refClass' => 'EventCompetence',
             'local' => 'event_id',
             'foreign' => 'competence_id'));

        $this->hasMany('Invitation', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('InvitationEmail', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('PhotoProjet', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('Ressource', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('EventFiliere', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('EventTheme', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('EventCompetence', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('EventMetier', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('EventStructure', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('EventAdmin', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('EventInvite', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('ProjetIdee', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'titre',
             ),
             ));
        $geolocatable0 = new Doctrine_Template_Geolocatable(array(
             'fields' => 
             array(
              0 => 'lieu',
              1 => 'adresse',
              2 => 'ville',
             ),
             ));
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
        $this->actAs($geolocatable0);
    }
}