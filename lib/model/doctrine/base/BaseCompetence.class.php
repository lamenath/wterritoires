<?php

/**
 * BaseCompetence
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $nom
 * @property clob $description
 * @property boolean $is_activated
 * @property Doctrine_Collection $Profil
 * @property Doctrine_Collection $ProfilCompetence
 * @property Doctrine_Collection $ProfilCompetenceRecherche
 * @property Doctrine_Collection $Event
 * @property Doctrine_Collection $EventCompetence
 * @property Doctrine_Collection $Structure
 * @property Doctrine_Collection $StructureCompetence
 * @property Doctrine_Collection $Projet
 * @property Doctrine_Collection $ProjetCompetence
 * 
 * @method string              getNom()                       Returns the current record's "nom" value
 * @method clob                getDescription()               Returns the current record's "description" value
 * @method boolean             getIsActivated()               Returns the current record's "is_activated" value
 * @method Doctrine_Collection getProfil()                    Returns the current record's "Profil" collection
 * @method Doctrine_Collection getProfilCompetence()          Returns the current record's "ProfilCompetence" collection
 * @method Doctrine_Collection getProfilCompetenceRecherche() Returns the current record's "ProfilCompetenceRecherche" collection
 * @method Doctrine_Collection getEvent()                     Returns the current record's "Event" collection
 * @method Doctrine_Collection getEventCompetence()           Returns the current record's "EventCompetence" collection
 * @method Doctrine_Collection getStructure()                 Returns the current record's "Structure" collection
 * @method Doctrine_Collection getStructureCompetence()       Returns the current record's "StructureCompetence" collection
 * @method Doctrine_Collection getProjet()                    Returns the current record's "Projet" collection
 * @method Doctrine_Collection getProjetCompetence()          Returns the current record's "ProjetCompetence" collection
 * @method Competence          setNom()                       Sets the current record's "nom" value
 * @method Competence          setDescription()               Sets the current record's "description" value
 * @method Competence          setIsActivated()               Sets the current record's "is_activated" value
 * @method Competence          setProfil()                    Sets the current record's "Profil" collection
 * @method Competence          setProfilCompetence()          Sets the current record's "ProfilCompetence" collection
 * @method Competence          setProfilCompetenceRecherche() Sets the current record's "ProfilCompetenceRecherche" collection
 * @method Competence          setEvent()                     Sets the current record's "Event" collection
 * @method Competence          setEventCompetence()           Sets the current record's "EventCompetence" collection
 * @method Competence          setStructure()                 Sets the current record's "Structure" collection
 * @method Competence          setStructureCompetence()       Sets the current record's "StructureCompetence" collection
 * @method Competence          setProjet()                    Sets the current record's "Projet" collection
 * @method Competence          setProjetCompetence()          Sets the current record's "ProjetCompetence" collection
 * 
 * @package    rrr
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCompetence extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('competence');
        $this->hasColumn('nom', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('description', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('is_activated', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             ));


        $this->index('is_activated', array(
             'fields' => 
             array(
              0 => 'is_activated',
             ),
             ));
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Profil', array(
             'refClass' => 'ProfilCompetence',
             'local' => 'competence_id',
             'foreign' => 'profil_id'));

        $this->hasMany('ProfilCompetence', array(
             'local' => 'id',
             'foreign' => 'competence_id'));

        $this->hasMany('ProfilCompetenceRecherche', array(
             'local' => 'id',
             'foreign' => 'competence_id'));

        $this->hasMany('Event', array(
             'refClass' => 'EventCompetence',
             'local' => 'competence_id',
             'foreign' => 'event_id'));

        $this->hasMany('EventCompetence', array(
             'local' => 'id',
             'foreign' => 'competence_id'));

        $this->hasMany('Structure', array(
             'refClass' => 'StructureCompetence',
             'local' => 'competence_id',
             'foreign' => 'structure_id'));

        $this->hasMany('StructureCompetence', array(
             'local' => 'id',
             'foreign' => 'competence_id'));

        $this->hasMany('Projet', array(
             'refClass' => 'ProjetCompetence',
             'local' => 'competence_id',
             'foreign' => 'projet_id'));

        $this->hasMany('ProjetCompetence', array(
             'local' => 'id',
             'foreign' => 'competence_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'nom',
             ),
             ));
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
    }
}