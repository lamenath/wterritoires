<?php

/**
 * Projet
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    rrr
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Projet extends BaseProjet
{
	// Can edit a project
	const ROLE_REFERENT = "referent";
	const ROLE_CREATOR = "creator";

	// Cannot edit a project
	const ROLE_CONTRIBUTOR = "contributeur";
	const ROLE_VIEWER = "observateur";
	const ROLE_FOREIGNER = "foreigner";

	public function postDelete($values)
	{
		// Remove all stories from this project
		Story::erase_all(
					"Projet",
					$this->get("id")
		);
	}
	
	public function postInsert($values)
	{
		// Create Story
		Story::publish(
					"default",
					"Projet",
					$this->get("id"),
					sfContext::getInstance()->getUser()->getId(),
					"create",
					"",
					array()
		);
	}

	public function __toString()
	{
		return $this->getNom();
	}

	public function __getAction()
	{
		switch($this->getAction())
		{
			case "regional";
				return "rÃ©gionale";
			break;
			case "ultralocal";
				return "ultralocale";
			break;
			case "local";
				return "locale";
			break;
			case "territorial":
				return "territoriale";
			break;
		}
	}

	public function getPays()
	{
		if($this->getCommune())
		{
			return $this->getCommune()->getPays()->getNom();
		}
		else
		{
			return false;
		}
	}

	public static function getNewProjets()
	{
		return Doctrine_Query::create()
						->from('Projet p')
						->orderBy("p.id DESC")
						->limit(5)
						->useResultCache(true, 8000)
						->execute();
	}

	public function getReferents()
	{
		return Doctrine_Query::create()
						->from('ProfilProjet r')
						->leftJoin('r.Profil p')
						->where("r.projet_id=?", $this->getId())
						->andWhere('r.role=?', self::ROLE_REFERENT)
						->orderBy("p.nom")
						->limit(3)
						->execute();
	}

	public function getMembres()
	{
		return Doctrine_Query::create()
						->from('ProfilProjet r')
						->leftJoin('r.Profil p')
						->where("r.projet_id=?", $this->getId())
						->andWhere('r.role = "' . self::ROLE_VIEWER .'" OR r.role = "'.self::ROLE_CONTRIBUTOR.'"')
						->orderBy("p.nom")
						->execute();
	}

	public function getProjetsConnexes()
	{
		$filieres = $this->getProjetFiliere();
		$results = array();

		foreach($filieres as $f)
		{
			$results[] = $f->getFiliereId();
		}

		if(!count($results)) return array();

		return Doctrine_Query::create()
							->from('ProjetFiliere p')
							->where('p.filiere_id IN ('.implode(',', $results).')')
							->andWhere('p.projet_id != ?', $this->getId())
							->orderBy("RANDOM()")
							->limit(3)
							->useResultCache(true)
							->execute();
	}

	public function getFilieres()
	{
		$return = array();

		foreach( $this->getFiliere() as $metier)
		{
			$return[] = $metier;
		}
		return implode(", ", $return);
	}


	public static function getActivity($project_id = false)
	{
		if($project_id === false)
			$project_id = $this->getId();

		$ajouts = array();

		$data = Doctrine_Query::create()
								->from('ProfilProjet p')
								->leftJoin("p.Profil pr")
								->where('p.projet_id = ?', $project_id)
								->orderBy("p.date DESC")
								->limit(8)
								->execute(array(), "profile_light");

		/*$dataFiles = Doctrine_Query::create()
								->from('Ressource r')
								->where('r.projet_id = ?', $project_id)
								->orderBy("r.date DESC")
								->limit(8)
								->useResultCache(true)
								->execute();*/

		foreach($data as $g) { $ajouts[strtotime($g["extraData"]["date"])] = array("adhesion", $g); }
		//foreach($dataFiles as $g) { $ajouts[strtotime($g->getDate())] = array("files", $g); }

		krsort($ajouts);

		$i=0;
		foreach($ajouts as $key => $ajout)
		{
			if(++$i > 15) unset($ajouts[$key]);
		}

		return $ajouts;
	}
}
